// <auto-generated />
using System;
using DicomApp.DAL.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DicomApp.DAL.Migrations
{
    [DbContext(typeof(ShippingDBContext))]
    [Migration("20240730184858_GameCharge")]
    partial class GameCharge
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DicomApp.DAL.DB.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance");

                    b.Property<string>("Ban")
                        .HasColumnName("BAN");

                    b.Property<string>("BankName");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Iban")
                        .HasColumnName("IBAN");

                    b.Property<string>("InstaPay");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("RefId")
                        .HasMaxLength(100);

                    b.Property<int?>("RoleId");

                    b.Property<int>("UserId");

                    b.Property<int?>("VodafoneCash");

                    b.HasKey("AccountId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementRequestId");

                    b.Property<int?>("BranchId");

                    b.Property<int?>("BuyerId");

                    b.Property<int?>("CashTransferId");

                    b.Property<int?>("CityId");

                    b.Property<int?>("CommonUserId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("GameId");

                    b.Property<int?>("GameId1");

                    b.Property<int>("GamerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRefund");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("Level");

                    b.Property<string>("Password")
                        .HasMaxLength(250);

                    b.Property<int?>("PickupRequestId");

                    b.Property<int>("Price");

                    b.Property<string>("Rank");

                    b.Property<string>("RefId")
                        .HasMaxLength(255);

                    b.Property<int?>("ShipmentTypeId");

                    b.Property<int>("StatusId");

                    b.Property<string>("UserName")
                        .HasMaxLength(500);

                    b.Property<int?>("ZoneId");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("BranchId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CashTransferId");

                    b.HasIndex("CityId");

                    b.HasIndex("CommonUserId");

                    b.HasIndex("GameId");

                    b.HasIndex("GameId1");

                    b.HasIndex("GamerId");

                    b.HasIndex("PickupRequestId");

                    b.HasIndex("ShipmentTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.AdvertisementPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("AdvertisementPhotos");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.AppService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowAnonymous");

                    b.Property<bool>("AllowLog");

                    b.Property<string>("ClassName")
                        .HasMaxLength(150);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LogMessage")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool?>("ShowToUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("Service_Name_unique");

                    b.ToTable("AppService");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("BranchName")
                        .IsRequired();

                    b.Property<string>("City");

                    b.Property<string>("ContactPerson");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Phone");

                    b.Property<string>("State");

                    b.Property<string>("ZipCode");

                    b.HasKey("BranchId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.CashTransfer", b =>
                {
                    b.Property<int>("CashTransferId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<double>("Amount");

                    b.Property<int?>("Apartment");

                    b.Property<int?>("AreaId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<int?>("Floor");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReceived");

                    b.Property<string>("Landmark");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Otp")
                        .HasColumnName("OTP")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(100);

                    b.Property<int>("ReceiverId");

                    b.Property<string>("RefId")
                        .HasMaxLength(100);

                    b.Property<byte>("TypeId");

                    b.Property<int?>("ZoneId");

                    b.HasKey("CashTransferId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ZoneId");

                    b.ToTable("CashTransfer");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy");

                    b.Property<int?>("DeleteBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnName("Name_Ar")
                        .HasMaxLength(150);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnName("Name_En")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<int?>("BranchId");

                    b.Property<string>("CityName")
                        .HasColumnName("City_Name")
                        .HasMaxLength(150);

                    b.Property<string>("CityNameAr")
                        .IsRequired()
                        .HasColumnName("City_Name_AR")
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Lat")
                        .HasMaxLength(50);

                    b.Property<string>("Lng")
                        .HasMaxLength(50);

                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("State_ID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ZoneId")
                        .HasColumnName("ZoneID");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ZoneId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.CommonResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(150);

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("ResourceKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ResourceLang")
                        .HasMaxLength(5);

                    b.Property<string>("ResourceValue")
                        .IsRequired();

                    b.Property<string>("Url")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("ResourceKey", "ResourceLang")
                        .IsUnique()
                        .HasName("IX_Common_Resource")
                        .HasFilter("[ResourceKey] IS NOT NULL AND [ResourceLang] IS NOT NULL");

                    b.ToTable("Common_Resource");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.CommonUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasMaxLength(150);

                    b.Property<int?>("AccountNumber");

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<string>("AddressDetails")
                        .HasMaxLength(150);

                    b.Property<int>("Age");

                    b.Property<int?>("Apartment");

                    b.Property<int?>("AreaId");

                    b.Property<int?>("Averageorders");

                    b.Property<string>("Bank")
                        .HasMaxLength(150);

                    b.Property<int?>("BranchId");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<bool>("ConfirmEmail");

                    b.Property<int?>("CountryId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("Floor");

                    b.Property<string>("FullName")
                        .HasMaxLength(100);

                    b.Property<int>("Gender");

                    b.Property<string>("HashedPassword");

                    b.Property<int?>("IbanNumber")
                        .HasColumnName("IBAN_Number");

                    b.Property<string>("ImgUrl");

                    b.Property<string>("InstaPayAccountName")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLoggedIn");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Landmark");

                    b.Property<DateTime?>("LastLocationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Lat")
                        .HasMaxLength(50);

                    b.Property<string>("Lng")
                        .HasMaxLength(50);

                    b.Property<string>("LocationUrl");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool?>("OpenPackage");

                    b.Property<string>("PageName")
                        .HasMaxLength(100);

                    b.Property<bool?>("PartialDelivery");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ProductType")
                        .HasMaxLength(100);

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID");

                    b.Property<string>("TelegramUserName");

                    b.Property<long?>("VerificationCode");

                    b.Property<bool?>("VisaPayment");

                    b.Property<int?>("WalletNumber");

                    b.Property<int?>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RoleId");

                    b.ToTable("CommonUser");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.CommonUserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthCreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("AuthExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("AuthIp")
                        .HasColumnName("AuthIP")
                        .HasMaxLength(100);

                    b.Property<string>("AuthToken")
                        .HasMaxLength(250);

                    b.Property<int>("CommonUserId")
                        .HasColumnName("Common_UserID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceEmail")
                        .HasMaxLength(150);

                    b.Property<string>("DeviceImei")
                        .HasColumnName("DeviceIMEI")
                        .HasMaxLength(150);

                    b.Property<string>("DeviceMobileNumber")
                        .HasMaxLength(50);

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("DeviceOsversion")
                        .HasColumnName("DeviceOSVersion")
                        .HasMaxLength(150);

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(500);

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("EnableNotification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsGoogleSupport");

                    b.Property<bool>("IsLoggedIn");

                    b.Property<string>("Lang")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastActiveDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedBy");

                    b.HasKey("Id");

                    b.HasIndex("CommonUserId");

                    b.ToTable("Common_UserDevice");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Complain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionBy");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Department")
                        .HasMaxLength(150);

                    b.Property<string>("Description");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsSolved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("ActionBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VendorId");

                    b.ToTable("Complain");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("FlagUrl");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.FollowUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementId");

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<int?>("FollowUpTypeId");

                    b.Property<int?>("GameServiceGamerServiceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LastModifiedBy");

                    b.Property<string>("Lat")
                        .HasMaxLength(50);

                    b.Property<string>("Lng")
                        .HasMaxLength(50);

                    b.Property<int?>("StatusId")
                        .HasColumnName("StatusID");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FollowUpTypeId");

                    b.HasIndex("GameServiceGamerServiceId");

                    b.ToTable("FollowUp");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.FollowUpType", b =>
                {
                    b.Property<int>("FollowUpTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FollowUpTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("FollowUpTypeId");

                    b.ToTable("FollowUpType");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy");

                    b.Property<int?>("DeleteBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("ImgUrl")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnName("Name_Ar")
                        .HasMaxLength(150);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnName("Name_En")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.GameCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<int?>("DeleteBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<int>("Discount");

                    b.Property<int>("GameId");

                    b.Property<string>("Img");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("Price");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameCharge");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.GamerService", b =>
                {
                    b.Property<int>("GamerServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<int>("GameId");

                    b.Property<int>("GameServiceType");

                    b.Property<int>("GamerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("Level");

                    b.Property<string>("Password");

                    b.Property<int>("Price");

                    b.Property<string>("Rank");

                    b.Property<string>("RefId");

                    b.Property<int>("StatusId");

                    b.Property<string>("UserName");

                    b.HasKey("GamerServiceId");

                    b.HasIndex("GameId");

                    b.HasIndex("GamerId");

                    b.HasIndex("StatusId");

                    b.ToTable("GamerService");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int?>("GamerServiceId");

                    b.Property<int>("InvoiceType");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRefund");

                    b.Property<DateTime?>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int>("Price");

                    b.Property<string>("RefId");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AdvertisementId")
                        .IsUnique()
                        .HasFilter("[AdvertisementId] IS NOT NULL");

                    b.HasIndex("GamerServiceId")
                        .IsUnique()
                        .HasFilter("[GamerServiceId] IS NOT NULL");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NotificationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Icon")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsSeen");

                    b.Property<int?>("RecipientId")
                        .HasColumnName("RecipientID");

                    b.Property<int?>("RecipientRoleId");

                    b.Property<int?>("SeenBy");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SenderId")
                        .HasColumnName("SenderID");

                    b.Property<string>("TargetPath");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.HasKey("NotificationId");

                    b.HasIndex("RecipientRoleId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.PickupRequest", b =>
                {
                    b.Property<int>("PickupRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementRequestId");

                    b.Property<int>("AreaId");

                    b.Property<int?>("BranchId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<int?>("DeliveryManId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("PickupDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("PickupFees");

                    b.Property<int>("PickupRequestTypeId");

                    b.Property<string>("RefId")
                        .HasColumnName("RefID");

                    b.Property<int>("StatusId");

                    b.Property<DateTime>("TimeFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("TimeTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("VendorAddress");

                    b.Property<int?>("VendorApartment");

                    b.Property<int>("VendorFloor");

                    b.Property<int>("VendorId");

                    b.Property<string>("VendorLandmark");

                    b.Property<string>("VendorLocation");

                    b.Property<string>("VendorName")
                        .IsRequired();

                    b.Property<string>("VendorPhone")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("ZoneId");

                    b.HasKey("PickupRequestId");

                    b.HasIndex("AreaId");

                    b.HasIndex("BranchId");

                    b.HasIndex("DeliveryManId");

                    b.HasIndex("PickupRequestTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VendorId");

                    b.HasIndex("ZoneId");

                    b.ToTable("PickupRequest");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.PickupRequestType", b =>
                {
                    b.Property<int>("PickupRequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("PickupRequestTypeId");

                    b.ToTable("PickupRequestType");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.ProblemType", b =>
                {
                    b.Property<int>("ProblemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NameAr")
                        .HasMaxLength(150);

                    b.Property<string>("NameEn")
                        .HasMaxLength(150);

                    b.Property<int?>("Type");

                    b.HasKey("ProblemTypeId");

                    b.ToTable("ProblemType");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DeleteAt");

                    b.Property<int?>("DeleteBy");

                    b.Property<bool>("Editable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.RoleAppService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppServiceId")
                        .HasColumnName("AppServiceID");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedBy");

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("AppServiceId", "RoleId")
                        .IsUnique()
                        .HasName("RoleIDServiceIDUniq");

                    b.ToTable("RoleAppService");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.ShipmentCustomerFollowUp", b =>
                {
                    b.Property<int>("ShipmentCustomerFollowUpId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<bool?>("IsCallAnswered");

                    b.Property<bool?>("IsConfirmed");

                    b.Property<DateTime?>("NextCallOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextCallTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextCallTimeTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note");

                    b.HasKey("ShipmentCustomerFollowUpId");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ShipmentCustomerFollowUp");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.ShipmentType", b =>
                {
                    b.Property<int>("ShipmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ShipmentTypeId");

                    b.ToTable("ShipmentType");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAR")
                        .HasMaxLength(50);

                    b.Property<string>("NameEN")
                        .HasMaxLength(50);

                    b.Property<int>("StatusType");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Testimonial", b =>
                {
                    b.Property<int>("TestimonialId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int?>("DeleteBy");

                    b.Property<DateTime?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastModifiedAt");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<int?>("LastModifiedByNavigationId");

                    b.Property<int>("Rate");

                    b.HasKey("TestimonialId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedByNavigationId");

                    b.ToTable("Testimonial");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AccountId1");

                    b.Property<int?>("AccountId2");

                    b.Property<int?>("AdvertisementId");

                    b.Property<int>("Amount");

                    b.Property<int>("BuyerId");

                    b.Property<int?>("CashTransferId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSuccess");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LastModifiedBy");

                    b.Property<string>("PaymentId");

                    b.Property<int?>("PickupRequestId");

                    b.Property<string>("RefId")
                        .HasMaxLength(100);

                    b.Property<byte>("TypeId");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountId1");

                    b.HasIndex("AccountId2");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CashTransferId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PickupRequestId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.UserLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<long>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationID")
                        .HasDefaultValueSql("((1))");

                    b.Property<double?>("AquirityDistance")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BataryStatus");

                    b.Property<long?>("ChannelId")
                        .HasColumnName("ChannelID");

                    b.Property<DateTime>("CreationDateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<double?>("DirectionAngle")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250);

                    b.Property<bool?>("IsOnline")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 10)");

                    b.Property<int?>("NetworkStatus");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("PlaceId")
                        .IsRequired()
                        .HasColumnName("PlaceID")
                        .HasMaxLength(250);

                    b.Property<DateTime>("SubmitDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .HasMaxLength(250);

                    b.Property<int>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLocation");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Userhubconnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnName("ConnectionID")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOnline");

                    b.Property<DateTime>("ModificationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Userhubconnection");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.VendorProduct", b =>
                {
                    b.Property<int>("VendorProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableStock");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("OriginalPrice");

                    b.Property<string>("Size")
                        .HasMaxLength(150);

                    b.Property<double>("StockPrice");

                    b.Property<int>("VendorId");

                    b.HasKey("VendorProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorProduct");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<string>("Description");

                    b.Property<string>("WarehouseName")
                        .IsRequired();

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LastModifiedBy");

                    b.Property<string>("NameAr")
                        .HasColumnName("Name_Ar")
                        .HasMaxLength(150);

                    b.Property<string>("NameEn")
                        .HasColumnName("Name_En")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.ZoneTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LastModifiedBy");

                    b.Property<double>("Tax");

                    b.Property<int>("ZoneId")
                        .HasColumnName("ZoneID");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneTax");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Account", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.CommonUser", "CreatedByNavigation")
                        .WithMany("AccountCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Account_CommonUser1");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "LastModifiedByNavigation")
                        .WithMany("AccountLastModifiedByNavigation")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK_Account_CommonUser2");

                    b.HasOne("DicomApp.DAL.DB.Role", "Role")
                        .WithMany("Account")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Account_Role");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "User")
                        .WithMany("AccountUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Account_CommonUser");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Advertisement", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Branch")
                        .WithMany("Shipment")
                        .HasForeignKey("BranchId");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Buyer")
                        .WithMany("AdvertisementsBuyer")
                        .HasForeignKey("BuyerId");

                    b.HasOne("DicomApp.DAL.DB.CashTransfer", "CashTransfer")
                        .WithMany("Shipment")
                        .HasForeignKey("CashTransferId");

                    b.HasOne("DicomApp.DAL.DB.City")
                        .WithMany("Shipment")
                        .HasForeignKey("CityId");

                    b.HasOne("DicomApp.DAL.DB.CommonUser")
                        .WithMany("ShipmentCustomer")
                        .HasForeignKey("CommonUserId");

                    b.HasOne("DicomApp.DAL.DB.Game", "Game")
                        .WithMany("Advertisements")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_Shipment_Game")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.Game")
                        .WithMany("ShipmentWarehouseGame")
                        .HasForeignKey("GameId1");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Gamer")
                        .WithMany("AdvertisementsGamer")
                        .HasForeignKey("GamerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.PickupRequest")
                        .WithMany("Shipment")
                        .HasForeignKey("PickupRequestId");

                    b.HasOne("DicomApp.DAL.DB.ShipmentType")
                        .WithMany("Shipment")
                        .HasForeignKey("ShipmentTypeId");

                    b.HasOne("DicomApp.DAL.DB.Status", "Status")
                        .WithMany("Advertisements")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.Zone")
                        .WithMany("Advertisement")
                        .HasForeignKey("ZoneId");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.AdvertisementPhotos", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Advertisement", "Advertisement")
                        .WithMany("AdvertisementPhotos")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DicomApp.DAL.DB.CashTransfer", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.City", "Area")
                        .WithMany("CashTransfer")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_CashTransfer_City");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "CreatedByNavigation")
                        .WithMany("CashTransferCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_CashTransfer_CommonUser");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "LastModifiedByNavigation")
                        .WithMany("CashTransferLastModifiedByNavigation")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK_CashTransfer_CommonUser1");

                    b.HasOne("DicomApp.DAL.DB.Account", "Receiver")
                        .WithMany("CashTransfer")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_CashTransfer_Account");

                    b.HasOne("DicomApp.DAL.DB.Zone", "Zone")
                        .WithMany("CashTransfer")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_CashTransfer_Zone");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.City", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Branch", "Branch")
                        .WithMany("CityNavigation")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Branch_City");

                    b.HasOne("DicomApp.DAL.DB.Zone", "Zone")
                        .WithMany("City")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_City_Zone");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.CommonUser", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Branch", "Branch")
                        .WithMany("CommonUser")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Branch_CommonUser");

                    b.HasOne("DicomApp.DAL.DB.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId");

                    b.HasOne("DicomApp.DAL.DB.Role", "Role")
                        .WithMany("CommonUser")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_CommonUser_Role");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.CommonUserDevice", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.CommonUser", "CommonUser")
                        .WithMany("CommonUserDevice")
                        .HasForeignKey("CommonUserId")
                        .HasConstraintName("FK_Common_UserDevice_Common_User");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Complain", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.CommonUser", "ActionByNavigation")
                        .WithMany("ComplainActionByNavigation")
                        .HasForeignKey("ActionBy")
                        .HasConstraintName("FK_Complains_ActionBy");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Employee")
                        .WithMany("ComplainEmployee")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Complains_Employee");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Vendor")
                        .WithMany("ComplainVendor")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Complains_Vendor");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.ContactUs", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.CommonUser", "User")
                        .WithMany("ContactUs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ContactUs_CommonUser");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.FollowUp", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Advertisement", "Advertisement")
                        .WithMany("FollowUp")
                        .HasForeignKey("AdvertisementId")
                        .HasConstraintName("FK_FollowUp_Shipment");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "CreatedByNavigation")
                        .WithMany("FollowUp")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Visit_FollowUp_CommonUser");

                    b.HasOne("DicomApp.DAL.DB.FollowUpType")
                        .WithMany("FollowUp")
                        .HasForeignKey("FollowUpTypeId");

                    b.HasOne("DicomApp.DAL.DB.GamerService", "GameService")
                        .WithMany("FollowUp")
                        .HasForeignKey("GameServiceGamerServiceId");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Game", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Category", "Category")
                        .WithMany("Game")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Game_Category");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.GameCharge", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Game", "Game")
                        .WithMany("GameCharges")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DicomApp.DAL.DB.GamerService", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Game", "Game")
                        .WithMany("GamerServices")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Gamer")
                        .WithMany("GamerServices")
                        .HasForeignKey("GamerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.Status", "Status")
                        .WithMany("GamerServices")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Invoice", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Advertisement", "Advertisement")
                        .WithOne("Invoice")
                        .HasForeignKey("DicomApp.DAL.DB.Invoice", "AdvertisementId");

                    b.HasOne("DicomApp.DAL.DB.GamerService", "GamerService")
                        .WithOne("Invoice")
                        .HasForeignKey("DicomApp.DAL.DB.Invoice", "GamerServiceId");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Notification", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Role", "RecipientRole")
                        .WithMany("Notification")
                        .HasForeignKey("RecipientRoleId")
                        .HasConstraintName("FK_Notification_Notification1");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Sender")
                        .WithMany("Notification")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_Notification_Notification");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.PickupRequest", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.City", "Area")
                        .WithMany("PickupRequest")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_PickupRequest_City");

                    b.HasOne("DicomApp.DAL.DB.Branch", "Branch")
                        .WithMany("PickupRequest")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Branch_PickupRequest");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "DeliveryMan")
                        .WithMany("PickupRequestDeliveryMan")
                        .HasForeignKey("DeliveryManId")
                        .HasConstraintName("FK_PickupRequest_CommonUser2");

                    b.HasOne("DicomApp.DAL.DB.PickupRequestType", "PickupRequestType")
                        .WithMany("PickupRequest")
                        .HasForeignKey("PickupRequestTypeId")
                        .HasConstraintName("FK_PickupRequestType_PickupRequest");

                    b.HasOne("DicomApp.DAL.DB.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Vendor")
                        .WithMany("PickupRequestVendor")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_PickupRequest_CommonUser");

                    b.HasOne("DicomApp.DAL.DB.Zone", "Zone")
                        .WithMany("PickupRequest")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_PickupRequest_Zone");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.RoleAppService", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.AppService", "AppService")
                        .WithMany("RoleAppService")
                        .HasForeignKey("AppServiceId")
                        .HasConstraintName("FK_RoleAppService_AppService");

                    b.HasOne("DicomApp.DAL.DB.Role", "Role")
                        .WithMany("RoleAppService")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleAppService_Role1");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.ShipmentCustomerFollowUp", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Advertisement", "Shipment")
                        .WithMany()
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "CreatedByNavigation")
                        .WithMany("ShipmentCustomerFollowUp")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_ShipmentCustomerFollowup_CommonUser");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Testimonial", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.CommonUser", "CreatedByNavigation")
                        .WithMany("Testimonials")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "LastModifiedByNavigation")
                        .WithMany()
                        .HasForeignKey("LastModifiedByNavigationId");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Transaction", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Account")
                        .WithMany("AccountTransactionReceiver")
                        .HasForeignKey("AccountId");

                    b.HasOne("DicomApp.DAL.DB.Account")
                        .WithMany("AccountTransactionSender")
                        .HasForeignKey("AccountId1");

                    b.HasOne("DicomApp.DAL.DB.Account")
                        .WithMany("AccountTransactionVendor")
                        .HasForeignKey("AccountId2");

                    b.HasOne("DicomApp.DAL.DB.Advertisement", "Advertisement")
                        .WithMany("Transactions")
                        .HasForeignKey("AdvertisementId");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DicomApp.DAL.DB.CashTransfer")
                        .WithMany("AccountTransaction")
                        .HasForeignKey("CashTransferId");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "CreatedByNavigation")
                        .WithMany("AccountTransactionCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_AccountTransaction_CommonUser");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "LastModifiedByNavigation")
                        .WithMany("AccountTransactionLastModifiedByNavigation")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK_AccountTransaction_CommonUser1");

                    b.HasOne("DicomApp.DAL.DB.PickupRequest")
                        .WithMany("AccountTransaction")
                        .HasForeignKey("PickupRequestId");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.UserLocation", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.CommonUser", "User")
                        .WithMany("UserLocation")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLocation_Common_User");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.VendorProduct", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.CommonUser", "Vendor")
                        .WithMany("VendorProduct")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorProduct_CommonUser");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.Zone", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Branch", "Branch")
                        .WithMany("Zone")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Branch_Zone");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "CreatedByNavigation")
                        .WithMany("ZoneCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Zone_CommonUser");

                    b.HasOne("DicomApp.DAL.DB.CommonUser", "LastModifiedByNavigation")
                        .WithMany("ZoneLastModifiedByNavigation")
                        .HasForeignKey("LastModifiedBy")
                        .HasConstraintName("FK_Zone_CommonUser1");
                });

            modelBuilder.Entity("DicomApp.DAL.DB.ZoneTax", b =>
                {
                    b.HasOne("DicomApp.DAL.DB.Zone", "Zone")
                        .WithMany("ZoneTax")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_ZoneTax_Zone");
                });
#pragma warning restore 612, 618
        }
    }
}
