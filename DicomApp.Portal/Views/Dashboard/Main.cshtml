
@using DicomApp.CommonDefinitions.DTO
@using DicomApp.Helpers;
@using DicomApp.CommonDefinitions.DTO;
@using DicomApp.Portal.Controllers
@using Microsoft.Extensions.Localization
@model DashboardDTO
@inject IStringLocalizer<DashboardController> Localizer

<main>
    <div class="container-fluid site-width">
        <!-- START: Breadcrumbs-->
        <div class="row Red-Row">
            <div class="col-12 col-lg-12 col-xl-12 col-sm-12  align-self-center">
                <div class="sub-header pt-0 pb-3 align-self-center d-sm-flex w-100 rounded">
                    <div class="w-sm-100 mr-auto">
                        <span class="Header-Titel">@Localizer["dashboard"]</span>
                    </div>
                    <div class="d-flex Filter-Section col">
                        <button class="Filter" onclick="OpenFilter()"><img img src="~/dist/images/Icons/Filter.png">@Localizer["filter"]</button>
                    </div>
                    @{
                        await Html.RenderPartialAsync("_FilterModal",
                        new OptionDTO 
                        { Action = "Main",
                        Controller = "Dashboard",
                        ClassName = "Filter-Container-Dashbord",
                        Columns = 6,
                        SelectListType = new byte[] { 0 } });
                    }
                </div>
            </div>
        </div>
        <!-- END: Breadcrumbs-->
        <!-- START: Card Data-->
        <div class="row Red-Row">
            <div class="col-12 col-sm-12 col-xl-5">
                <div class="Shipments-Info-section">
                    <div class="Shipments-Info">
                        <p>@Localizer["totalAccounts"]</p>
                        <span><i class="ion-cube"></i> @Model.AllAdvertisements_Count</span>
                        <span><i class="ion-card"></i> @Model.AllAdvertisements_Total<sub>$</sub></span>
                    </div>
                    <div class="Shipments-Info">
                        <p>@Localizer["soldAccounts"]</p>
                        <span><i class="ion-cube"></i> @Model.SoldAdvertisements_Count</span>
                        <span><i class="ion-card"></i> @Model.SoldAdvertisements_Total<sub>$</sub></span>
                    </div>
                    <div class="Shipments-Info">
                        <p>@Localizer["pendingAccounts"]</p>
                        <span><i class="ion-cube"></i> @Model.PendingAdvertisements_Count</span>
                        <span><i class="ion-card"></i> @Model.PendingAdvertisements_Total<sub>$</sub></span>
                    </div>
                    <div class="Shipments-Info">
                        <p>@Localizer["rejectAccounts"]</p>
                        <span><i class="ion-cube"></i> @Model.RejectAdvertisements_Count</span>
                        <span><i class="ion-card"></i> @Model.RejectAdvertisements_Total<sub>$</sub></span>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-3">
                <div class="Delivery-Success-Section d-flex justify-content-end">
                    <div class="Delivery-Success">
                        <p>@Localizer["transactionState"]</p>
                        <input class="knob" data-fgColor="#02C94F" data-thickness=".3" data-linecap=round readonly value="@Model.Success_Rate">
                        <span class="Percent">%</span>
                        <div class="status">
                            <div class="Unsuccessful">
                                <div></div>
                                <p class="Delivery-Success-number Unsuccess">@Model.TransactionSource_UnSuccess</p>
                                <p class="Delivery-Success-Name">@Localizer["unSuccess"]</p>
                            </div>
                            <div class="Successful">
                                <div></div>
                                <p class="Delivery-Success-number Success">@Model.TransactionSource_Success</p>
                                <p class="Delivery-Success-Name">@Localizer["success"]</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-4">
                <div class="Available-Balance-Section">
                    <div class="Available-Balance">
                        <p>@Localizer["totalEarning"]</p>
                        <p class="Balance">
                            @Model.Available_Balance <span>$</span>
                        </p>
                        <div>
                            <img src="~/dist/images/Card.png" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-8">
                <div class="Widget-Large">
                    <div>
                        <p class="WidgetLarge-Header">@Localizer["monthlyPerformance"]</p>
                    </div>
                    <hr />
                    <div id="Monthly-Performance"></div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-4">
                <div class="Total-Earning">
                    <p class="Total-Earning-p">@Localizer["earningType"]</p>
                   <p class="Earning">@Model.TotalEarning <sub>$</sub></p>
                    <div id="Total-Earning-chart"></div>
                    <ul>
                        <li>
                            <span class="Gold-Point"></span>
                            <p>@Localizer["account"]</p>
                        </li>
                        <li>
                            <span class="Green-Point"></span>
                            <p>@Localizer["push"]</p>
                        </li>
                        <li>
                            <span class="Blue-Point"></span>
                            <p>@Localizer["change"]</p>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-8">
                <div class="Widget-Large">
                    <div>
                        <p class="WidgetLarge-Header">@Localizer["topGames",10]</p>
                        <hr />
                    </div>
                    <div id="Top-Games"></div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-4">
                <div class="Widget-Small">
                    <p class="WidgetSmall-Header">@Localizer["ratingAverage"]</p>
                    <hr />
                    <div class="RatingAverage">
                        <img src="/dist/images/Stars.png"/>
                       <p> @Model.RatingAverage</p>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-8">
                <div class="Widget-Large">
                    <div>
                        <p class="WidgetLarge-Header">@Localizer["topBuyers"]</p>
                        <hr />
                    </div>
                    <div id="Top-Buyer"></div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-4">
                <div class="Widget-Small">
                    <p class="WidgetSmall-Header">@Localizer["genders"]</p>
                    <hr />
                    <div id="genders"></div>
                </div>
            </div>
        </div>
    </div>

</main>
<script src="~/dist/vendors/jquery-knob/jquery.knob.min.js" ></script>
<script src="~/dist/vendors/apexcharts/apexcharts.min.js"></script>
<script src="~/dist/js/knob.script.js"></script>
<script>
    $(document).ready(function () {
    let theme = 'dark';
    let primarycolor = getComputedStyle(document.body).getPropertyValue('--primarycolor');
    let bAdvertisementcolor = getComputedStyle(document.body).getPropertyValue('--bAdvertisementcolor');
    let bodycolor = getComputedStyle(document.body).getPropertyValue('--bodycolor');
    function OnBegin() {
        if($('#To').val() < $("#From").val() )
        {
            Swal.fire({
                position: 'center',
                icon: 'error',
                    title: @Localizer["Home"],
                showConfirmButton: false,
                timer: 3000
            });
            return false;
        }
        else
        {
        $("#Ajaxloader").css("display", "inline-block").fadeIn(20000)
        $("#Ajaxloader").removeClass("d-none");
        }
    }
    function OnFailure() {
        alert("Error occured.");
    }
    function OnSuccess() 
    {
        $("#Ajaxloader").fadeOut(1000);
    }
    function OnComplete() {}
    function loadIndicators(url) {
        let dateFrom = $("#dateFrom").val();
        let dateTo = $("#dateTo").val();
        window.location.href = url + "?" + "From=" + dateFrom + "&To=" + dateTo;
    }
        function GetCharts() {
            /////////////////////////////////// Radial Chart /////////////////////
            options = {
                theme: {
                    mode: theme
                },
                chart: {
                    height: 280,
                    type: 'radialBar',
                },
                plotOptions: {
                    radialBar: {
                        dataLabels: {
                            name: {
                                fontSize: '16px',
                                fontWeight: 'bold'
                            },
                            value: {
                                fontSize: '12px',
                                fontWeight: 'bold'
                            },
                        }
                    }
                },
                colors: ['#FFCD1C', '#02C94F', '#1755E7'],
                series: [@Math.Round(Model.Account), @Math.Round(Model.Push), @Math.Round(Model.Change)],
                labels: ["@Html.Raw(Localizer["account"])","@Html.Raw(Localizer["push"])", "@Html.Raw(Localizer["change"])"],
                stroke: {
                    lineCap: "round",
                },
            }
            let totalEarningChart = new ApexCharts(
                document.querySelector("#Total-Earning-chart"),
                options
            );
            totalEarningChart.render();
            ////////////////////////////Monthly-Performance//////////////////////////
            let ModelData = @Html.Raw(Json.Serialize(Model.Chart_Year));
            let mKey, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12;
            for (let i = 0; i < ModelData.length; i++) {
                mKey = ModelData[i].key;
                m1 = ModelData[i].value1;
                m2 = ModelData[i].value2;
                m3 = ModelData[i].value3;
                m4 = ModelData[i].value4;
                m5 = ModelData[i].value5;
                m6 = ModelData[i].value6;
                m7 = ModelData[i].value7;
                m8 = ModelData[i].value8;
                m9 = ModelData[i].value9;
                m10 = ModelData[i].value10;
                m11 = ModelData[i].value11;
                m12 = ModelData[i].value12;
            }
            options = {
                theme: {
                    mode: theme
                },
                color: 'gradient(356.64deg, rgba(27, 89, 248, 0.8) 48.49%, rgba(239, 49, 56, 0.04) 282.14%)',
                chart: {
                    height: 300,
                    type: 'bar',
                    color: 'linear-gradient(356.64deg, rgba(27, 89, 248, 0.8) 48.49%, rgba(239, 49, 56, 0.04) 282.14%)',
                },
                plotOptions: {
                    bar: {
                        horizontal: false,
                        columnWidth: '18%',
                    },
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    show: true,
                    width: 2,
                    colors: ['transparent']
                },
                series: [{
                    name: '',
                    data: [m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12]
                }],
                xaxis: {
                    categories: [
                        "@Html.Raw(Localizer["JAN"])", 
                        "@Html.Raw(Localizer["FEB"])", 
                        "@Html.Raw(Localizer["MAR"])", 
                        "@Html.Raw(Localizer["APR"])", 
                        "@Html.Raw(Localizer["MAY"])", 
                        "@Html.Raw(Localizer["JUN"])", 
                        "@Html.Raw(Localizer["JUL"])", 
                        "@Html.Raw(Localizer["AUG"])", 
                        "@Html.Raw(Localizer["SEP"])", 
                        "@Html.Raw(Localizer["OCT"])", 
                        "@Html.Raw(Localizer["NOV"])", 
                        "@Html.Raw(Localizer["DEC"])"
                    ],
                    labels: {
                        style: {
                            colors: "#fff",
                            fontSize: '12px',
                            fontFamily: 'Poppins',
                            fontWeight: 500,
                        },
                    }
                },
                yaxis: {
                    title: {
                        text: "@Html.Raw(Localizer["totalAdvertisementCount"])"
                    }
                },
                fill: {
                    opacity: 1,
                    color: '#1755E7',

                },
                tooltip: {
                    y: {
                        formatter: function (val) {
                            return val + " @Html.Raw(Localizer["totalAdvertisementCount"])"
                        }
                    },
                    theme: 'dark'
                }
            }
            let monthlyPerformance = new ApexCharts(
                document.querySelector("#Monthly-Performance"),
                options
            );
            monthlyPerformance.render();
            ////////////////////////////Top-Games//////////////////////////
            if ($("#Top-Games").length > 0) {
                let ModelData = @Html.Raw(Json.Serialize(Model.Chart_TopGames.Take(15)));
                let DeliveredCount = [], AreaName = [];
                for (let i = 0; i < ModelData.length; i++) {
                    AreaName.push(ModelData[i].key);
                    DeliveredCount.push(ModelData[i].value1);
                }
                options = {
                    theme: {
                        mode: theme
                    },
                    color: ['#1755E7A3'],
                    chart: {
                        height: 300,
                        type: 'bar',
                        color: ['#1755E7A3'],
                    },
                    plotOptions: {
                        bar: {
                            horizontal: false,
                            columnWidth: '40%',
                            endingShape: 'rounded',
                            fontWeight: '500'
                        },
                    },
                    dataLabels: {
                        enabled: false,
                        fontWeight: '500'
                    },
                    stroke: {
                        show: true,
                        width: 2,
                        colors: ['transparent']
                    },
                    colors: ['#da70d6'],
                    series: [{
                        data: DeliveredCount,
                        name: 'Total Shipping Deliverd',
                    }],
                    xaxis: {
                        categories: AreaName,
                        tickPlacement: 'on',
                        labels: {
                            rotate: 45,
                            style: {
                                colors: "#969696",
                                fontSize: '16px',
                                fontFamily: 'Poppins',
                                fontWeight: 600,
                            },
                        },
                    },
                    yaxis: {
                        title: {
                            text: ''
                        }
                    },
                    fill: {
                        opacity: .5,
                        colors: ['#da70d6'],
                    },

                    tooltip: {
                        y: {
                            formatter: function (val) {
                                return val
                            }
                        }
                    }
                }

                let topAreas = new ApexCharts(
                    document.querySelector("#Top-Games"),
                    options
                );

                topAreas.render();
            }
            ////////////////////////////Top-Buyer //////////////////////////
            if ($("#Top-Buyer").length > 0) {
                let ModelData = @Html.Raw(Json.Serialize(Model.Chart_TopBuyer.Take(15)));
                let CourierName = [], DeliveredCount = [];
                for (let i = 0; i < ModelData.length; i++) {
                    CourierName.push(ModelData[i].key);
                    DeliveredCount.push(ModelData[i].value1);
                }
                options = {
                    theme: {
                        mode: theme
                    },
                    color: ['#1755E7CC'],
                    chart: {
                        height: 300,
                        type: 'bar',
                        color: ['#1755E7CC'],
                    },
                    plotOptions: {
                        bar: {
                            horizontal: false,
                            columnWidth: '40%',
                            endingShape: 'rounded',
                            fontWeight: '500'
                        },
                    },
                    dataLabels: {
                        enabled: false,
                        fontWeight: '500'
                    },
                    stroke: {
                        show: true,
                        width: 2,
                        colors: ['transparent']
                    },
                    series: [{
                        data: DeliveredCount,
                        name: '',
                    }],
                    xaxis: {
                        categories: CourierName,
                        tickPlacement: 'on',
                        labels: {
                            rotate: 0,
                            style: {
                                colors: "#969696",
                                fontSize: '14px',
                                fontFamily: 'Poppins',
                                fontWeight: 600,
                            },
                        },
                    },
                    yaxis: {
                        title: {
                            text: ''
                        }
                    },
                    fill: {
                        opacity: 1,
                        color: ['#1755E7CC'],
                    },

                    tooltip: {
                        y: {
                            formatter: function (val) {
                                return val
                            }
                        }
                    }
                }

                let topDriverchart = new ApexCharts(
                    document.querySelector("#Top-Buyer"),
                    options
                );

                topDriverchart.render();
            }
            //////////////////////////Top-Vendors///////////////////////////
            if ($("#Top-Vendors").length > 0) {
                let ModelData = @Html.Raw(Json.Serialize(Model.Chart_TopBuyer.Take(5)));
                let VendorName = [], DeliveredCount = [];
                for (let i = 0; i < ModelData.length; i++) {
                    VendorName.push(ModelData[i].key);
                    DeliveredCount.push(ModelData[i].value1);
                }
                options = {
                    theme: {
                        mode: theme
                    },
                    color: ['#1755E7A3'],
                    chart: {
                        height: 320,
                        type: 'bar',
                        color: ['#1755E7A3'],
                    },
                    plotOptions: {
                        bar: {
                            horizontal: true,
                            columnWidth: '40%',
                            endingShape: 'rounded',
                            fontWeight: '500'
                        },
                    },
                    dataLabels: {
                        enabled: false,
                        fontWeight: '500'
                    },
                    stroke: {
                        show: true,
                        width: 2,
                        colors: ['transparent']
                    },
                    colors: ['#EF3138'],
                    series: [{
                        data: DeliveredCount,
                        name: 'Total Shipping Deliverd',

                    }],
                    xaxis: {
                        categories: VendorName,
                        tickPlacement: 'on',
                        labels: {
                            rotate: 45,
                            style: {
                                colors: "#969696",
                                fontSize: '10px',
                                fontWeight: 400,
                            },
                        },
                        lines: {
                            show: false,
                        }
                    },
                    yaxis: {
                        title: {
                            text: ''
                        },
                        lines: {
                            show: false,
                        }
                    },
                    fill: {
                        opacity: .6,
                        colors: ['#EF3138'],
                    },

                    tooltip: {
                        y: {
                            formatter: function (val) {
                                return val
                            }
                        }
                    }
                }

                let topVendorschart = new ApexCharts(
                    document.querySelector("#Top-Vendors"),
                    options
                );

                topVendorschart.render();
            }

            ///////////////////////Packaging Stock//////////////////////////
            if ($("#genders").length > 0) {
                let ModelData = @Html.Raw(Json.Serialize(Model.Chart_Genders))
                    let Value = [], key = [];
                for (let i = 0; i < ModelData.length; i++) {
                    key.push(ModelData[i].key);
                    Value.push(ModelData[i].value1);
                }
                var options = {
                  series: Value,
                  chart: {
                    width: 380,
                    type: 'pie'
                  },
                  labels: key,
                 // colors: ['#FF5733', '#33FF57', '#3357FF'], // Customize the colors for each series
                  dataLabels: {
                    style: {
                      colors: ['#fff'], // Set the font color of data labels,
                      fontSize:"17px"
                    }
                  },
                  legend: {
                    labels: {
                      colors: '#fff' // Font color of legend text
                    },
                    fontSize: '18px', // Set the font size of the entire legend
                    position: 'bottom' // Position of the legend
                  },
                  responsive: [{
                    breakpoint: 480,
                    options: {
                      chart: {
                        width: 500
                      },
                      legend: {
                        position: 'bottom',
                        labels: {
                          colors: '#fff', // Set the font color of the legend for small screens
                          fontSize:"17px"
                        }
                      }
                    }
                  }]
                };

var chart = new ApexCharts(document.querySelector("#chart"), options);
chart.render();

            var gendersChart = new ApexCharts(document.querySelector("#genders"), options);
            gendersChart.render();
            }
        }
   GetCharts();
})
</script>
    