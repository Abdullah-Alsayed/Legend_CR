
@using DicomApp.CommonDefinitions.DTO;
@using DicomApp.Helpers;
@model ViewModel<DashboardDTO>
@{
    var Role = AuthHelper.GetClaimValue(User, "RoleID");
    int Filter;
    if (Role == (int)EnumRole.AccountManager || Role == (int)EnumRole.Admin)
    { 
        Filter = (byte)EnumSelectListType.Vendor; 
    }
    else { Filter = 0; }
}
<main>
    <div class="container-fluid site-width">
        <!-- START: Breadcrumbs-->
        <div class="row Red-Row">
            <div class="col-12 col-lg-12 col-xl-12 col-sm-12  align-self-center">
                <div class="sub-header pt-0 pb-3 align-self-center d-sm-flex w-100 rounded">
                    <div class="w-sm-100 mr-auto">
                        <span class="Header-Titel">Dashboard</span>
                    </div>
                    <div class="d-flex Filter-Section col">
                        <button class="Filter" onclick="OpenFilter()"><img img src="~/dist/images/Icons/Filter.png">Filter</button>
                    </div>
                   @{
                        await Html.RenderPartialAsync("_FilterModal",
                        new OptionDTO 
                        { Action = "AccountDashboard",
                        Controller = "Home",
                        ClassName = "Filter-Container-Dashbord",
                        Columns = 6,
                        Lookup = Model.Lookup,
                        SelectListType = new byte[] { (byte) Filter}});
                    }
                </div>
            </div>
        </div>
        <!-- END: Breadcrumbs-->
        <!-- START: Card Data-->
        <div class="row Red-Row">
            <div class="col-12 col-sm-12 col-xl-5">
                <div class="Shipments-Info-section">
                    <div class="Shipments-Info">
                        <p>Total Shipment</p>
                        <span><i class="ion-cube"></i> @Model.ObjDTO.AllOrders_Count</span>
                        <span><i class="ion-card"></i> @Model.ObjDTO.AllOrders_Total<sub>EGP</sub></span>
                        <span class="Shipments-Info-Active"><img src="~/dist/images/Icons/@Model.ObjDTO.AllOrders_Arow"> @Model.ObjDTO.AllOrders_Percentchanged%</span>
                    </div>
                    <div class="Shipments-Info">
                        <p>Delivered Shipments</p>
                        <span><i class="ion-cube"></i> @Model.ObjDTO.DeliveredOrders_Count</span>
                        <span><i class="ion-card"></i> @Model.ObjDTO.DeliveredOrders_Total<sub>EGP</sub></span>
                        <span class="Shipments-Info-Active"><img src="~/dist/images/Icons/@Model.ObjDTO.DeliveredOrders_Arow"> @Model.ObjDTO.DeliveredOrders_Percentchanged%</span>
                    </div>
                    <div class="Shipments-Info">
                        <p>Pending Shipments</p>
                        <span><i class="ion-cube"></i> @Model.ObjDTO.PendingOrders_Count</span>
                        <span><i class="ion-card"></i> @Model.ObjDTO.PendingOrders_Total<sub>EGP</sub></span>
                        <span class="Shipments-Info-Active"><img src="~/dist/images/Icons/@Model.ObjDTO.PendingOrders_Arow"> @Model.ObjDTO.PendingOrders_Percentchanged%</span>
                    </div>
                    <div class="Shipments-Info">
                        <p>Cancelled Shipments</p>
                        <span><i class="ion-cube"></i> @Model.ObjDTO.CanceledOrders_Count</span>
                        <span><i class="ion-card"></i> @Model.ObjDTO.CanceledOrders_Total<sub>EGP</sub></span>
                        <span class="Shipments-Info-Active"><img src="~/dist/images/Icons/@Model.ObjDTO.CanceledOrders_Arow"> @Model.ObjDTO.CanceledOrders_Percentchanged%</span>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-3">
                <div class="Delivery-Success-Section d-flex">
                    <div class="Delivery-Success">
                        <p>Delivery Success Rate</p>
                        <input class="knob" data-fgColor="#02C94F" data-thickness=".3" data-linecap=round readonly value="@Model.ObjDTO.Success_Rate">
                        <span class="Percent">%</span>
                        <div class="status">
                            <div class="Unsuccessful">
                                <div></div>
                                <p class="Delivery-Success-number Unsuccess">@Model.ObjDTO.CanceledOrders_Count</p>
                                <p class="Delivery-Success-Name">Unsuccessful</p>
                            </div>
                            <div class="Successful">
                                <div></div>
                                <p class="Delivery-Success-number Success">@Model.ObjDTO.DeliveredOrders_Count</p>
                                <p class="Delivery-Success-Name">Successful</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-4">
                <div class="Available-Balance-Section">
                    <div class="Available-Balance">
                        <p>Available Balance</p>
                        <span>EGP</span>
                        <p class="Balance">@Model.ObjDTO.Available_Balance</p>
                        <div>
                            <img src="~/dist/images/Card.png" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-8">
                <div class="Widget-Large">
                    <div>
                        <p class="WidgetLarge-Header">Monthly Performance</p>
                        <select class="mr-5">
                            <option>Month</option>
                        </select>
                    </div>
                    <hr />
                    <div id="Monthly-Performance"></div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-xl-4">
                <div class="Total-Earning">
                    <p class="Total-Earning-p">Total Earning</p>
                    <span>@Model.ObjDTO.TotalEarning_Percentchanged% <i class="@(Model.ObjDTO.TotalEarning_Arow == Constants.ArrowType.Up ? "ion-ios-arrow-up" : "ion-ios-arrow-down")"></i></span>
                    <p class="Earning">@Model.ObjDTO.DeliveredOrders_Total <sub>EGP</sub></p>
                    <div id="Total-Earning-chart"></div>
                    <ul>
                        <li>
                            <span class="Gold-Point"></span>
                            <p>Income</p>
                        </li>
                        <li>
                            <span class="Green-Point"></span>
                            <p>Shipping Fees</p>
                        </li>
                        <li>
                            <span class="Blue-Point"></span>
                            <p>Cancellation Fees</p>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="col-12 col-sm-12 col-xl-12">
                <div class="Widget-Large">
                    <div>
                        <p class="WidgetLarge-Header">Top 10 Areas</p>
                        <hr />
                    </div>
                    <div id="Top-Areas"></div>
                </div>
            </div>
        </div>
    </div>
    <script src="~/dist/vendors/jquery/jquery-3.3.1.min.js"></script>

    <script src="~/dist/vendors/jquery-knob/jquery.knob.min.js"></script>
    <script src="~/dist/vendors/apexcharts/apexcharts.min.js"></script>
    <script src="~/dist/js/knob.script.js"></script>
</main>

<script>
    function GetCharts() {
        let theme = 'light';
        let primarycolor = getComputedStyle(document.body).getPropertyValue('--primarycolor');
        let bordercolor = getComputedStyle(document.body).getPropertyValue('--bordercolor');
        let bodycolor = getComputedStyle(document.body).getPropertyValue('--bodycolor');
        /////////////////////////////////// Radial Chart /////////////////////
        options = {
            theme: {
                mode: theme
            },
            chart: {
                height: 280,
                type: 'radialBar',
            },
            plotOptions: {
                radialBar: {
                    dataLabels: {
                        name: {
                            fontSize: '16px',
                            fontWeight: 'bold'
                        },
                        value: {
                            fontSize: '12px',
                            fontWeight: 'bold'
                        },
                    }
                }
            },
            colors: ['#FFCD1C', '#02C94F', '#1755E7'],
            series: [@Math.Round(Model.ObjDTO.Packaging), @Math.Round(Model.ObjDTO.Shipping), @Math.Round(Model.ObjDTO.Storage)],
            labels: ['Packaging', 'Shipping', 'Storage'],
            stroke: {
                lineCap: "round",
            },
        }
        let totalEarningChart = new ApexCharts(
            document.querySelector("#Total-Earning-chart"),
            options
        );
        totalEarningChart.render();
        ////////////////////////////Monthly-Performance//////////////////////////
        let ModelData = @Html.Raw(Json.Serialize(Model.ObjDTO.Chart_Year));
        let mKey, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12;
        for (let i = 0; i < ModelData.length; i++) {
            mKey = ModelData[i].key;
            m1 = ModelData[i].value1;
            m2 = ModelData[i].value2;
            m3 = ModelData[i].value3;
            m4 = ModelData[i].value4;
            m5 = ModelData[i].value5;
            m6 = ModelData[i].value6;
            m7 = ModelData[i].value7;
            m8 = ModelData[i].value8;
            m9 = ModelData[i].value9;
            m10 = ModelData[i].value10;
            m11 = ModelData[i].value11;
            m12 = ModelData[i].value12;
        }
        options = {
            theme: {
                mode: theme
            },
            color: 'gradient(356.64deg, rgba(27, 89, 248, 0.8) 48.49%, rgba(239, 49, 56, 0.04) 282.14%)',
            chart: {
                height: 300,
                type: 'bar',
                color: 'linear-gradient(356.64deg, rgba(27, 89, 248, 0.8) 48.49%, rgba(239, 49, 56, 0.04) 282.14%)',
            },
            plotOptions: {
                bar: {
                    horizontal: false,
                    columnWidth: '18%',
                    endingShape: 'rounded'
                },
            },
            dataLabels: {
                enabled: false
            },
            stroke: {
                show: true,
                width: 2,
                colors: ['transparent']
            },
            series: [{
                name: '',
                data: [m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12]
            }],
            xaxis: {
                categories: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],
                labels: {
                    style: {
                        colors: "#838383",
                        fontSize: '12px',
                        fontFamily: 'Poppins',
                        fontWeight: 500,
                    },
                }
            },
            yaxis: {
                title: {
                    text: 'Total shipping Count'
                }
            },
            fill: {
                opacity: 1,
                color: 'linear-gradient(356.64deg, rgba(27, 89, 248, 0.8) 48.49%, rgba(239, 49, 56, 0.04) 282.14%)',

            },
            tooltip: {
                y: {
                    formatter: function (val) {
                        return val + " Total shipping Count"
                    }
                }
            }
        }
        let monthlyPerformance = new ApexCharts(
            document.querySelector("#Monthly-Performance"),
            options
        );
        monthlyPerformance.render();
        ////////////////////////////Top-Areas//////////////////////////
        if ($("#Top-Areas").length > 0) {
            let ModelData = @Html.Raw(Json.Serialize(Model.ObjDTO.Chart_TopArea.Take(10)));
            let DeliveredCount = [], AreaName = [];
            for (let i = 0; i < ModelData.length; i++) {
                AreaName.push(ModelData[i].key);
                DeliveredCount.push(ModelData[i].value1);
            }
            options = {
                theme: {
                    mode: theme
                },
                color: ['#1755E7A3'],
                chart: {
                    height: 300,
                    type: 'bar',
                    color: ['#1755E7A3'],
                },
                plotOptions: {
                    bar: {
                        horizontal: false,
                        columnWidth: '40%',
                        endingShape: 'rounded',
                        fontWeight: '500'
                    },
                },
                dataLabels: {
                    enabled: false,
                    fontWeight: '500'
                },
                stroke: {
                    show: true,
                    width: 2,
                    colors: ['transparent']
                },
                colors: ['#da70d6'],
                series: [{
                    data: DeliveredCount,
                    name: 'Total Shipping Deliverd',
                }],
                xaxis: {
                    categories: AreaName,
                    tickPlacement: 'on',
                    labels: {
                        rotate: 45,
                        style: {
                            colors: "#969696",
                            fontSize: '16px',
                            fontFamily: 'Poppins',
                            fontWeight: 600,
                        },
                    },
                },
                yaxis: {
                    title: {
                        text: ''
                    }
                },
                fill: {
                    opacity: .5,
                    colors: ['#da70d6'],
                },

                tooltip: {
                    y: {
                        formatter: function (val) {
                            return val
                        }
                    }
                }
            }

            let topAreas = new ApexCharts(
                document.querySelector("#Top-Areas"),
                options
            );

            topAreas.render();
        }
    }
    GetCharts();
</script>
