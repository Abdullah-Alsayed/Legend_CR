@using DicomApp.CommonDefinitions.DTO
@using DicomApp.Portal.Controllers
@using Microsoft.Extensions.Localization
@model ResetPasswordDTO
@inject IStringLocalizer<UserController> _stringLocalizer
@{
    ViewData["Title"] = "ResetPassword";
    Layout = "~/Views/Shared/_VendorLayout.cshtml";
}
<div class="ForgotPassword">
<h2>@_stringLocalizer["forgotPassword"]</h2>

<form asp-action="ResetPassword" method="post">
    <div class="form-group">
        <label asp-for="Password">@_stringLocalizer["password"]</label>
            <input asp-for="Password" type="password" placeholder="@_stringLocalizer["pleaseEnter"] @_stringLocalizer["password"]" class="form-control" />
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>

    <input type="hidden" asp-for="EmailUser" />
    <input type="hidden" asp-for="Token" />
    <button type="submit" class="btn btn-primary"> @_stringLocalizer["resetPassword"]</button>
</form>

</div>

<script>
    window.onload = function () {
        // Get the current URL's query string
        const urlParams = new URLSearchParams(window.location.search);
        
        // Extract the 'email' parameter from the query string
        const email = urlParams.get('email');
        console.log('Email:', email); // Debug log to check if the email is being extracted correctly

        // If the email exists in the URL, set it to the hidden input field
        if (email) {
            var emailInput = document.getElementById('EmailUser')
            emailInput.value = email;
        }

        // Extract the 'token' parameter from the query string
        const token = urlParams.get('token');
        console.log('Token:', token); // Debug log to check if the token is being extracted correctly
        
        // Set token to the hidden field if it exists
        if (token) {
            document.getElementById('Token').value = token;
        }
    };
</script>
