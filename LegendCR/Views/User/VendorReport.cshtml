
@*@using LegendCR.CommonDefinitions.DTO
@using LegendCR.CommonDefinitions.DTO;
@using LegendCR.BL.Services;
@model List<ShipmentDTO>
@{
    var invoicRecords = (List<InvoiceDTO>)ViewBag.invoices;
}
<main>
    <div class="container-fluid site-width">
        <!-- START: Filter-->
        <div class="row Red-Row">
            <div class="col-12 col-lg-12 col-xl-12 col-sm-12">
                <div class="sub-header py-5 d-flex">
                    <div>
                        <span class="Header-Titel">Vendors Report</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- END: Filter-->
    <div class="Shipment-container">
        <!-- Start: Filter-->
        <div class="row Red-Row">
            @{
                await Html.RenderPartialAsync("_ToolsRow", new OptionDTO { Action = "VendorReport", Controller = "User", SelectListType = new byte[] { (byte)EnumSelectListType.Vendor } });
            }
        </div>
        <!-- Modal -->
        <div class="modal fade" id="ShipmentDetails" tabindex="-1" aria-labelledby="ShipmentDetailsLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div id="ShipmentDetails-Body" class="modal-body">
                    </div>
                </div>
            </div>
        </div>
        <!-- END  : Filter-->
    </div>
    <div class="col-12">
        <span id="Ajaxloader" class="Ajaxloader d-none"></span>
    </div>
    <div class="Table-container">
        <table class="table" id="Red-Table">
            <thead>
                <tr>
                    <td>Vendor</td>
                    <td>Orders</td>
                    <td>Shipments</td>
                    <td>Pickups</td>
                    <td>Success %</td>
                    <td>Cash</td>
                    <td>Shipping Fees</td>
                    <td>Balance</td>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Count > 0)
                {
                    foreach (var item in Model.GroupBy(s => s.VendorId))
                    {
                        <tr>
                            <td>@item.FirstOrDefault().VendorName</td>
                            <td>
                                <b>Pending</b>: @item.Where(s => s.StatusId != (int)EnumStatus.Partial_Pickup && s.StatusId != (int)EnumStatus.Delivered && s.StatusId != (int)EnumStatus.Cancelled).Count() <br />
                                <b>Delivered</b> : @item.Where(s => s.StatusId == (int)EnumStatus.Delivered).Count()<br />
                                <b>Canceled</b> : @item.Where(s => s.StatusId == (int)EnumStatus.Cancelled).Count()
                            </td>
                            <td>@item.Count()</td>
                            <td>@item.Where(s => s.StatusId == (int)EnumStatus.Assigned_For_Pickup || s.StatusId == (int)EnumStatus.Ready_For_Pickup).Count()</td>
                            <td><b>@(item.Count() > 0 ? (100 * item.Count(p => p.StatusId == (int)EnumStatus.Delivered) / @item.Count()) : 0) %</b></td>
                            <td>@(invoicRecords.Where(p =>p.VendorId==item.Key&& p.InvoiceTypeId == 1).Sum(p => p.Total) - invoicRecords.Where(p => p.VendorId == item.Key && p.InvoiceTypeId == 1 && p.StatusId == (int)EnumStatus.Invoice_Paid).Sum(p => p.Total) - invoicRecords.Where(p => p.VendorId == item.Key && p.InvoiceTypeId == 2).Sum(p => p.Total)) EGP</td>
                            <td>@invoicRecords.Where(p => p.VendorId == item.Key && p.InvoiceTypeId == 1).Sum(p => p.ShippingFees) EGP</td>
                            <td>
                                <b>Paid</b>: @(invoicRecords.Where(p => p.VendorId == item.Key && p.InvoiceTypeId == 1 && p.StatusId == (int)EnumStatus.Invoice_Paid).Sum(p => p.Total) - invoicRecords.Where(p =>p.VendorId==item.Key && p.InvoiceTypeId == 2).Sum(p => p.Total)) EGP<br>
                                <b>Pending:</b> @(invoicRecords.Where(p => p.VendorId == item.Key && p.InvoiceTypeId == 1).Sum(p => p.Total) - invoicRecords.Where(p => p.VendorId == item.Key && p.InvoiceTypeId == 1 && p.StatusId == (int)EnumStatus.Invoice_Paid).Sum(p => p.Total) - invoicRecords.Where(p => p.VendorId == item.Key && p.InvoiceTypeId == 2).Sum(p => p.Total)) EGP
                            </td>

                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="20">
                            <h6 class="text-center text-danger my-5">No data available in table</h6>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- START: Card Data-->
</main>*@